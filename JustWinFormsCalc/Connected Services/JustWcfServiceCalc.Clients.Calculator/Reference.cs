//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalcContract", Namespace="http://schemas.datacontract.org/2004/07/JustWcfServiceCalc")]
    [System.SerializableAttribute()]
    public partial class CalcContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal AField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal BField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TokenField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal A {
            get {
                return this.AField;
            }
            set {
                if ((this.AField.Equals(value) != true)) {
                    this.AField = value;
                    this.RaisePropertyChanged("A");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal B {
            get {
                return this.BField;
            }
            set {
                if ((this.BField.Equals(value) != true)) {
                    this.BField = value;
                    this.RaisePropertyChanged("B");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Token {
            get {
                return this.TokenField;
            }
            set {
                if ((object.ReferenceEquals(this.TokenField, value) != true)) {
                    this.TokenField = value;
                    this.RaisePropertyChanged("Token");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CalcResponse", Namespace="http://schemas.datacontract.org/2004/07/JustWcfServiceCalc")]
    [System.SerializableAttribute()]
    public partial class CalcResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal ResultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JustWcfServiceCalc.Clients.Calculator.ICalculatorService")]
    public interface ICalculatorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Add", ReplyAction="http://tempuri.org/ICalculatorService/AddResponse")]
        JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse Add(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Add", ReplyAction="http://tempuri.org/ICalculatorService/AddResponse")]
        System.Threading.Tasks.Task<JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse> AddAsync(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Substract", ReplyAction="http://tempuri.org/ICalculatorService/SubstractResponse")]
        JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse Substract(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Substract", ReplyAction="http://tempuri.org/ICalculatorService/SubstractResponse")]
        System.Threading.Tasks.Task<JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse> SubstractAsync(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Multiply", ReplyAction="http://tempuri.org/ICalculatorService/MultiplyResponse")]
        JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse Multiply(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Multiply", ReplyAction="http://tempuri.org/ICalculatorService/MultiplyResponse")]
        System.Threading.Tasks.Task<JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse> MultiplyAsync(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Divide", ReplyAction="http://tempuri.org/ICalculatorService/DivideResponse")]
        JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse Divide(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorService/Divide", ReplyAction="http://tempuri.org/ICalculatorService/DivideResponse")]
        System.Threading.Tasks.Task<JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse> DivideAsync(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorServiceChannel : JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.ICalculatorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorServiceClient : System.ServiceModel.ClientBase<JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.ICalculatorService>, JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.ICalculatorService {
        
        public CalculatorServiceClient() {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse Add(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract) {
            return base.Channel.Add(contract);
        }
        
        public System.Threading.Tasks.Task<JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse> AddAsync(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract) {
            return base.Channel.AddAsync(contract);
        }
        
        public JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse Substract(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract) {
            return base.Channel.Substract(contract);
        }
        
        public System.Threading.Tasks.Task<JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse> SubstractAsync(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract) {
            return base.Channel.SubstractAsync(contract);
        }
        
        public JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse Multiply(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract) {
            return base.Channel.Multiply(contract);
        }
        
        public System.Threading.Tasks.Task<JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse> MultiplyAsync(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract) {
            return base.Channel.MultiplyAsync(contract);
        }
        
        public JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse Divide(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract) {
            return base.Channel.Divide(contract);
        }
        
        public System.Threading.Tasks.Task<JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcResponse> DivideAsync(JustWinFormsCalc.JustWcfServiceCalc.Clients.Calculator.CalcContract contract) {
            return base.Channel.DivideAsync(contract);
        }
    }
}
